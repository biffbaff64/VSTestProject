//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------

#include <cmath>

//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------

#include "Vector.h"

namespace GDX
{
    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector::Vector()
        :
        m_x(0),
        m_y(0)
    {
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector::Vector(const Vector& vector)
        :
        m_x(vector.m_x),
        m_y(vector.m_y)
    {
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector::Vector(const float both)
        :
        m_x(both),
        m_y(both)
    {
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector::Vector(const float x, const float y)
        :
        m_x(x),
        m_y(y)
    {
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector::Vector(const int both)
        :
        m_x((float) both),
        m_y((float) both)
    {
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector::Vector(const int x, const int y)
        :
        m_x(x),
        m_y(y)
    {
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector::Vector(const unsigned int both)
        :
        m_x((float) both),
        m_y((float) both)
    {
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector::Vector(const unsigned int x, const unsigned int y)
        :
        m_x((float) x),
        m_y((float) y)
    {
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    float Vector::Dot(const Vector& other)
    {
        return m_x * other.m_x + m_y * other.m_y;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    float Vector::Length()
    {
        return sqrt(Dot(*this));
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector Vector::Normalized()
    {
        const float scale = 1.0f / Length();

        return Vector(*this) * scale;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector& Vector::Normalize()
    {
        const float scale = 1.0f / Length();

        m_x *= scale;
        m_y *= scale;

        return *this;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector& Vector::operator+=(const Vector& vector)
    {
        m_x += vector.m_x;
        m_y += vector.m_y;

        return *this;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector& Vector::operator-=(const Vector& vector)
    {
        m_x -= vector.m_x;
        m_y -= vector.m_y;

        return *this;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector& Vector::operator*=(const Vector& vector)
    {
        m_x *= vector.m_x;
        m_y *= vector.m_y;

        return *this;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector& Vector::operator/=(const Vector& vector)
    {
        m_x /= vector.m_x;
        m_y /= vector.m_y;

        return *this;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector& Vector::operator*=(const float f)
    {
        m_x *= f;
        m_y *= f;

        return *this;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector& Vector::operator/=(const float f)
    {
        m_x /= f;
        m_y /= f;

        return *this;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector Vector::operator+(const Vector& vector) const
    {
        return Vector(*this) += vector;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector Vector::operator-(const Vector& vector) const
    {
        return Vector(*this) -= vector;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector Vector::operator*(const Vector& vector) const
    {
        return Vector(*this) *= vector;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector Vector::operator/(const Vector& vector) const
    {
        return Vector(*this) /= vector;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector Vector::operator*(const float f) const
    {
        return Vector(*this) *= f;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector Vector::operator/(const float f) const
    {
        return Vector(*this) /= f;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vector Vector::operator-() const
    {
        return Vector(-this->m_x, -this->m_y);
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    bool Vector::operator==(const Vector& vector) const
    {
        return m_x == vector.m_x && m_y == vector.m_y;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    bool Vector::operator!=(const Vector& vector) const
    {
        return !(*this == vector);
    }
}
