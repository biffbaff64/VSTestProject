#include "Box.h"

namespace GDX
{
    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Box::Box()
    {
        m_x      = 0;
        m_y      = 0;
        m_width  = 0;
        m_height = 0;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Box::Box(int width, int height)
    {
        Set(0, 0, width, height);
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Box::Box(int x, int y, int width, int height)
    {
        Set(x, y, width, height);
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    void Box::Set(const Box &box)
    {
        Set(box.m_x, box.m_y, box.m_width, box.m_height);
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    void Box::Set(int x, int y, int width, int height)
    {
        m_x      = x;
        m_y      = y;
        m_width  = width;
        m_height = height;

        m_size.m_x = width;
        m_size.m_y = height;
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    bool Box::Contains(int x, int y) const
    {
        return (m_x <= x) && ((m_x + m_width) >= x)
            && (m_y <= y) && ((m_y + m_height) >= y);
    }

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    bool Box::Overlaps(const sf::FloatRect& rect) const
	{
		return (m_x < (rect.left + rect.width))
			&& ((m_x + m_width) > rect.left)
			&& (m_y < (rect.top + rect.height))
			&& ((m_y + m_height) > rect.top);
	}

    //------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------

    Vec2Int Box::GetSize() const
    {
        return m_size;
    }
}
