
#include <algorithm>
#include "Color.h"

namespace GDX
{
	const Color Color::WHITE(1.f, 1.f, 1.f, 1.f);
	const Color Color::LIGHTGREY(0xbfbfbfff);
	const Color Color::GREY(0x7f7f7fff);
	const Color Color::DARKGREY(0x3f3f3fff);
	const Color Color::BLACK(0, 0, 0, 1);

	const Color Color::BLUE(0, 0, 1, 1);
	const Color Color::NAVY(0.0f, 0.0f, 0.5f, 1.0f);
	const Color Color::ROYALBLUE(0x4169e1ff);
	const Color Color::SLATE(0x708090ff);
	const Color Color::SKYBLUE(0x87ceebff);
	const Color Color::CYAN(0, 1, 1, 1);
	const Color Color::TEAL(0.0f, 0.5f, 0.5f, 1.0f);

	const Color Color::GREEN(0x00ff00ff);
	const Color Color::CHARTREUSE(0x7fff00ff);
	const Color Color::LIME(0x32cd32ff);
	const Color Color::FOREST(0x228b22ff);
	const Color Color::OLIVE(0x6b8e23ff);

	const Color Color::YELLOW(0xffff00ff);
	const Color Color::GOLD(0xffd700ff);
	const Color Color::ORANGE(0xffa500ff);

	const Color Color::BROWN(0x8b4513ff);
	const Color Color::TAN(0xd2b48cff);
	const Color Color::FIREBRICK(0xb22222ff);

	const Color Color::RED(0xff0000ff);
	const Color Color::SCARLET(0xff341cff);
	const Color Color::CORAL(0xff7f50ff);
	const Color Color::SALMON(0xfa8072ff);
	const Color Color::PINK(0xff69b4ff);
	const Color Color::MAGENTA(1, 0, 1, 1);

	const Color Color::PURPLE(0xa020f0ff);
	const Color Color::VIOLET(0xee82eeff);
	const Color Color::MAROON(0xb03060ff);

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color::Color()
	{
		m_red	= 0.0f;
		m_green	= 0.0f;
		m_blue	= 0.0f;
		m_alpha	= 1.0f;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color::Color(const Color &color)
	{
		m_red	= color.m_red;
		m_green	= color.m_green;
		m_blue	= color.m_blue;
		m_alpha = color.m_alpha;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color::Color(float r, float g, float b)
	{
		m_red	= r;
		m_green	= g;
		m_blue	= b;
		m_alpha = 1.0f;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color::Color(float r, float g, float b, float a)
	{
		m_red	= r;
		m_green = g;
		m_blue	= b;
		m_alpha	= a;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color::Color(int r, int g, int b)
	{
		m_red	= r;
		m_green	= g;
		m_blue	= b;
		m_alpha = 1.0f;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color::Color(int r, int g, int b, int a)
	{
		m_red	= r;
		m_green = g;
		m_blue	= b;
		m_alpha	= a;
	}
	
	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color::Color(int rgba8888)
	{
		Color color = RGBA8888ToColor(rgba8888);

		m_red	= color.m_red;
		m_green = color.m_green;
		m_blue	= color.m_blue;
		m_alpha = color.m_alpha;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color& Color::operator+=(const Color& color)
	{
		m_red	= fminf(m_red + color.m_red, 1);
		m_green	= fminf(m_green + color.m_green, 1);
		m_blue	= fminf(m_blue + color.m_blue, 1);

		return *this;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color& Color::operator-=(const Color& color)
	{
		m_red	= fmaxf(m_red + color.m_red, 0);
		m_green	= fmaxf(m_green + color.m_green, 0);
		m_blue	= fmaxf(m_blue + color.m_blue, 0);

		return *this;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color& Color::operator*=(const Color& color)
	{
		m_red	= fminf(fmaxf(m_red + color.m_red, 0), 1);
		m_green	= fminf(fmaxf(m_green + color.m_green, 0), 1);
		m_blue	= fminf(fmaxf(m_blue + color.m_blue, 0), 1);
		m_alpha	= fminf(fmaxf(m_alpha + color.m_alpha, 0), 1);

		return *this;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	float Color::ToFloatBits()
	{
		return 0.0f;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	float Color::ToFloatBits(int r, int g, int b, int a)
	{
		return 0.0f;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	float Color::ToFloatBits(float r, float g, float b, float a)
	{
		return 0.0f;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	int Color::ToIntBits()
	{
		return 0;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	int Color::ToIntBits(int r, int g, int b, int a)
	{
		return 0;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	int Color::ToIntBits(float r, float g, float b, float a)
	{
		return 0;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	int Color::RGB565(float r, float g, float b)
	{
		return 0;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	int Color::RGBA4444(float r, float g, float b, float a)
	{
		return 0;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	int Color::RGB888(float r, float g, float b)
	{
		return 0;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	int Color::RGBA8888(float r, float g, float b, float a)
	{
		return 0;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	int Color::ARGB8888(float a, float r, float g, float b)
	{
		return 0;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	int Color::RGB565(Color color)
	{
		return 0;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	int Color::RGBA4444(Color color)
	{
		return 0;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	int Color::RGB888(Color color)
	{
		return 0;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	int Color::RGBA8888(Color color)
	{
		return 0;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	int Color::ARGB8888(Color color)
	{
		return 0;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color Color::RGB565ToColor(int value)
	{
		return Color();
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color Color::RGBA4444ToColor(int value)
	{
		return Color();
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color Color::RGB888ToColor(int value)
	{
		return Color();
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color Color::RGBA8888ToColor(int value)
	{
		Color color;

		color.m_red		= ((value & 0xff000000) >> 24) / 255.0f;
		color.m_green	= ((value & 0x00ff0000) >> 16) / 255.0f;
		color.m_blue	= ((value & 0x0000ff00) >> 8) / 255.0f;
		color.m_alpha	= ((value & 0x000000ff)) / 255.0f;

		return color;
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color Color::ARGB8888ToColor(int value)
	{
		return Color();
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color Color::ABGR8888ToColor(float value)
	{
		return Color();
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color Color::FromHsv(float h, float s, float v)
	{
		return Color();
	}

	//------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------

	Color Color::ValueOf(char* hexString)
	{
		return Color();
	}
}

